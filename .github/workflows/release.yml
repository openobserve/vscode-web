name: Release

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.1'
          cache: 'yarn'

      - name: Debug environment
        run: |
          echo "Current shell: $SHELL"
          echo "Shell exists: $(which sh)"
          echo "Directory structure:"
          ls -la /
          echo "Environment variables:"
          env | sort
          echo "Available shells:"
          cat /etc/shells || echo "Cannot read /etc/shells"
          echo "Testing shell execution:"
          bash -c "echo 'Bash works'"
          sh -c "echo 'Sh works'" || echo "Sh does not work"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends zip git python3 make g++ build-essential libx11-dev libx11-xcb-dev libxkbfile-dev libnotify-bin libkrb5-dev
          sudo ln -sf /usr/bin/python3 /usr/bin/python
          echo "Verifying shell after installation:"
          which sh
          ls -la /bin/sh

      - name: Install dependencies
        run: |
          echo "Using shell: $SHELL"
          yarn install --frozen-lockfile

      - name: Create symbolic link for sh
        run: |
          echo "Creating symbolic link for sh"
          sudo ln -sf /bin/bash /bin/sh
          echo "Verifying sh link:"
          ls -la /bin/sh

      - name: Build project
        run: |
          echo "Using shell: $SHELL"
          # Create a modified build script that doesn't use child_process.execSync
          cat > modified-build.js << 'EOF'
          const process = require("process");
          const { execSync } = require("child_process");
          const fs = require("fs");
          const fse = require("fs-extra");
          const { version, ignoreExtensions } = require("./package.json");
          const path = require("path");

          const vscodeVersion = version.split("-")[0];

          function error(msg) {
            console.info("\x1b[31merror %s\x1b[0m", msg);
          }
          function ok(msg) {
            console.info("\x1b[32m%s\x1b[0m", msg);
          }
          function note(msg) {
            console.info("\x1b[90m%s\x1b[0m", msg);
          }
          function exec(cmd, opts) {
            console.info("\x1b[36m%s\x1b[0m", cmd);
            return execSync(cmd, { ...opts, shell: '/bin/bash' });
          }

          const requiredTools = ["node", "yarn", "git", "python"];
          note(`required tools ${JSON.stringify(requiredTools)}`);
          for (const tool of requiredTools) {
            try {
              execSync(`${tool} --version`, { stdio: "ignore", shell: '/bin/bash' });
            } catch (e) {
              error(`"${tool}" is not available.`);
              process.exit(1);
            }
          }
          ok("required tools installed");

          const node_version_out = execSync(`node -v`, { shell: '/bin/bash' });
          const node_version = node_version_out.toString().trim();
          if (node_version < "v20.0") {
            error(`Want node > 20. Got "${node_version}"`);
            process.exit(1);
          }

          if (!fs.existsSync("vscode")) {
            note("cloning vscode");
            exec(
              `git clone --depth 1 https://github.com/openobserve/vscode.git -b ${vscodeVersion}`,
              {
                stdio: "inherit",
              }
            );
          } else {
            ok("vscode already installed");
            note("delete vscode folder to clone again");
          }

          note("changing directory to vscode");
          process.chdir("vscode");

          function deleteDirectory(extension) {
            const extensionPath = path.join(__dirname, 'vscode', 'extensions', extension);
            if (fs.existsSync(extensionPath)) {
                fs.rmdirSync(extensionPath, { recursive: true });
                console.log(`Directory ${extensionPath} has been deleted.`);
            } else {
                console.log(`Directory ${extensionPath} does not exist.`);
            }
          }

          // Delete extensions
          note("deleting extensions");
          // Iterate over the list of extensions and delete each one
          ignoreExtensions.forEach(extension => {
            deleteDirectory(extension);
          });

          if (!fs.existsSync("node_modules")) {
            exec("yarn", {
              stdio: "inherit",
              env: {
                ...process.env,
                ELECTRON_SKIP_BINARY_DOWNLOAD: 1,
                PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1,
              },
            });
          } else {
            ok("node_modules exists. Skipping yarn");
          }

          // Use simple workbench
          note("copying workbench file");
          fs.copyFileSync(
            "../workbench.ts",
            "src/vs/code/browser/workbench/workbench.ts"
          );

          // Compile
          note("starting compile");
          exec("yarn gulp vscode-web-min", { stdio: "inherit" });
          ok("compile completed");

          // Extract compiled files
          if (fs.existsSync("../dist")) {
            note("cleaning ../dist");
            fs.rmdirSync("../dist", { recursive: true });
          } else {
            ok("../dist did not exist. No need to clean");
          }

          fs.mkdirSync("../dist");
          fse.copySync("../vscode-web", "../dist");
          ok("copied ../vscode-web to ../dist");
          EOF

          # Run the modified build script
          node modified-build.js

      - name: Prepare demo
        run: |
          echo "Using shell: $SHELL"
          yarn prepare-demo

      - name: Create zip archive
        run: |
          echo "Using shell: $SHELL"
          mkdir -p release
          zip -r release/vscode-web.zip demo

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-web-release
          path: release/vscode-web.zip

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: release/vscode-web.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
